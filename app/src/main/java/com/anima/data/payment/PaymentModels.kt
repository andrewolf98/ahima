package com.anima.data.payment

import java.math.BigDecimal
import java.util.Currency

data class Цена(
    val сумма: BigDecimal,
    val валюта: Валюта,
    val скидка: BigDecimal = BigDecimal.ZERO
)

enum class Валюта(val код: String, val символ: String) {
    RUB("RUB", "₽"),
    USD("USD", "$"),
    EUR("EUR", "€"),
    BTC("BTC", "₿"),
    ETH("ETH", "Ξ"),
    USDT("USDT", "₮")
}

enum class СпособОплаты {
    КАРТА,
    КРИПТОВАЛЮТА,
    TELEGRAM_WALLET
}

data class Бонус(
    val название: String,
    val описание: String,
    val тип: ТипБонуса,
    val активен: Boolean = false
)

enum class ТипБонуса {
    ВИЗУАЛЬНЫЙ,
    МУЗЫКАЛЬНЫЙ,
    СОВЕТ
}

data class ПлатежнаяИнформация(
    val страна: String,
    val среднийДоход: BigDecimal,
    val валютаСтраны: Валюта
)

data class РезультатПокупки(
    val успешно: Boolean,
    val сообщение: String? = null,
    val полученныеБонусы: List<Бонус> = emptyList()
)

// Моковые данные для примера
object МоковыеДанные {
    val бонусы = listOf(
        Бонус(
            название = "Премиум-тема",
            описание = "Эксклюзивная темная тема оформления",
            тип = ТипБонуса.ВИЗУАЛЬНЫЙ
        ),
        Бонус(
            название = "Коллекция успокаивающих звуков",
            описание = "10 уникальных звуков природы",
            тип = ТипБонуса.МУЗЫКАЛЬНЫЙ
        ),
        Бонус(
            название = "Персональные советы",
            описание = "Ежедневные рекомендации от экспертов",
            тип = ТипБонуса.СОВЕТ
        )
    )

    fun получитьЦену(информация: ПлатежнаяИнформация): Цена {
        // Базовая цена в рублях
        val базоваяЦена = BigDecimal("999")
        
        // Корректировка цены в зависимости от страны и дохода
        val коэффициент = when (информация.страна) {
            "RU" -> BigDecimal("1.0")
            "US" -> BigDecimal("1.5")
            "EU" -> BigDecimal("1.3")
            else -> BigDecimal("1.0")
        }

        // Корректировка по доходу
        val коэффициентДохода = when {
            информация.среднийДоход < BigDecimal("30000") -> BigDecimal("0.8")
            информация.среднийДоход > BigDecimal("100000") -> BigDecimal("1.2")
            else -> BigDecimal("1.0")
        }

        val итоговаяЦена = базоваяЦена * коэффициент * коэффициентДохода
        
        return Цена(
            сумма = итоговаяЦена,
            валюта = информация.валютаСтраны
        )
    }
} 